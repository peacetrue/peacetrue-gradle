import java.nio.file.Files
import java.nio.file.Paths

allprojects {

    task makeJavaDir(group: 'peacetrue') {
        doLast {
            def paths = ['src/main/java', 'src/main/resources', 'src/test/java', 'src/test/resources'];
            paths.forEach({ path ->
                File dir = new File("$projectDir.path/$path")
                if (!dir.exists()) dir.mkdirs()
            })
        }
    }

    // 软链接项目下所有文件。不直接软链接项目，是因为 examples 下的项目中可能需要添加额外的文件
    task linkSourceToAntoraExample(group: "peacetrue") {
        def folders = ["src", "gradle.properties", "build.gradle", "settings.gradle"]
        doLast {
            if (project == rootProject && rootProject.childProjects.size() > 0) return
            println("project: $project") // /Users/xiayx/Documents/Projects
            String basePath = System.getenv("workingDir")
            logger.info("basePath: {}", basePath) // /Users/xiayx/Documents/Projects
            def actualPath = projectDir.toString()
            logger.info("actualPath: {}", actualPath) // /Users/xiayx/Documents/Projects/bee/backend/monitor
            def relativePath = actualPath.substring(basePath.length())
            logger.info("relativePath: {}", relativePath) //  /bee/backend/monitor
            def rootProjectName = relativePath.split("/")[1]
            logger.info("rootProjectName: {}", rootProjectName) //  bee
            def rootRelativePath = Paths.get("/" + rootProjectName).relativize(Paths.get(relativePath))
            logger.info("rootRelativePath: {}", rootRelativePath) //  backend/monitor
            def rootProjectPath = Paths.get(basePath).resolve(rootProjectName)
            logger.info("rootProjectPath: {}", rootProjectPath) //  /Users/xiayx/Documents/Projects/bee
            String exampleDir = "${rootProjectPath}/docs/antora/modules/ROOT/examples/${rootRelativePath}"
            if (Files.notExists(Paths.get(exampleDir))) Files.createDirectories(Paths.get(exampleDir))
            folders.stream()
                    .filter(name -> Files.exists(Paths.get("$projectDir/$name")))
                    .forEach(name -> {
                        exec {
                            workingDir exampleDir
                            def args = ["ln", "-s", "${Paths.get(exampleDir).relativize(rootProjectPath)}/${rootRelativePath}/${name}", "${name}"]
                            println "command: ${String.join(" ", args)}"
                            commandLine args
                        }
                    })
        }
    }


    if (isRootProject) {
        task linkWorkflow(group: "peacetrue") {
            doLast {
                def workflow = "$projectDir/.github/workflows"
                if (Files.notExists(Paths.get(workflow))) Files.createDirectories(Paths.get(workflow))
                else delete("$workflow/main.yml")

                exec {
                    workingDir workflow
                    commandLine "ln", "${System.getenv("workingDir")}/peacetrue.github.io/docs/antora/modules/ROOT/examples/java-gradle-build.yml", "main.yml"
                }
            }
        }

        task linkGradle(group: "peacetrue") {
            doLast {
                delete("$projectDir/gradle/wrapper/gradle-wrapper.properties")
                exec {
                    workingDir "$projectDir/gradle/wrapper"
                    commandLine("ln", "${System.getenv("workingDir")}/peacetrue.github.io/docs/antora/modules/ROOT/assets/attachments/gradle/wrapper/gradle-wrapper.properties", "gradle-wrapper.properties")
                    ignoreExitValue(true)
                }
            }
        }

        task linkGitignore(group: "peacetrue") {
            doLast {
                delete("$projectDir/.gitignore")
                exec {
                    workingDir "$projectDir"
                    commandLine "ln", "${System.getenv("workingDir")}/peacetrue.github.io/docs/antora/modules/ROOT/examples/.gitignore", ".gitignore"
                }
            }
        }

        task linkReadme(group: "peacetrue") {
            doLast {
                delete("README.adoc")
                exec {
                    workingDir "$projectDir"
                    commandLine "ln", "-s", "docs/antora/modules/ROOT/pages/index.adoc", "README.adoc"
                }
            }
        }
    }

}
